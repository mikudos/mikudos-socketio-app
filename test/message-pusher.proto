syntax = "proto3";
package message_pusher;

service Message_pusher {
  rpc GetConfig(ConfigRequest) returns (ConfigResponse) {}
  rpc PushToChannel(PushMessage) returns (Response) {}
  rpc PushToChannelWithStatus(PushMessage) returns (Response) {}
  rpc GateStream(stream Response) returns (stream Message) {
  } // Gate communicate
}

message ConfigRequest { repeated string Keys = 1; }

message ConfigResponse {}

message PushMessage {
  bytes msg = 2;
  string channelId = 3;
  int32 expire = 5;
}

message Message {
  bytes msg = 2;
  string channelId = 3;
  int64 msgId = 4;
  int32 expire = 5;
  MessageType messageType = 7;
}

message Request { string name = 1; }

message Response {
  uint32 msgId = 1;
  string channelId = 2;
  bytes msg = 3;
  int32 expire = 4;
  MessageType messageType = 7;
}

enum MessageType { // message type
  REQUEST = 0;
  RESPONSE = 1;
  RECEIVED = 2;
  UNRECEIVED = 3;
}

message StreamingRequest { int64 count = 1; }

message Ping { int64 stroke = 1; }

message Pong { int64 stroke = 1; }